module SizedFIFO(CLK, RST_N, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR); 
   parameter               p1width = 1; 
   parameter               p2depth = 3; 
   parameter               p3cntr_width = 1; 
   parameter               guarded = 1; 
   localparam              p2depth2 = p2depth -2 ; 
   input                   CLK; 
   input                   RST_N; 
   input                   CLR; 
   input [p1width - 1 : 0] D_IN; 
   input                   ENQ; 
   input                   DEQ; 
   output                  FULL_N; 
   output                  EMPTY_N; 
   output [p1width - 1 : 0] D_OUT; 
   reg                      not_ring_full; 
   reg                      ring_empty; 
   reg [p3cntr_width-1 : 0] head; 
   wire [p3cntr_width-1 : 0] next_head; 
   reg [p3cntr_width-1 : 0]  tail; 
   wire [p3cntr_width-1 : 0] next_tail; 
   reg [p1width - 1 : 0]     arr[0: ((p2depth >= 2) ? (p2depth2) : 0)]; 
   reg [p1width - 1 : 0]     D_OUT; 
   reg                       hasodata; 
   wire [p3cntr_width-1:0]   depthLess2 = p2depth2[p3cntr_width-1:0] ; 
   wire [p3cntr_width-1 : 0] incr_tail; 
   wire [p3cntr_width-1 : 0] incr_head; 
   assign                    incr_tail = tail + 1'b1 ; 
   assign                    incr_head = head + 1'b1 ; 
   assign    next_head = (head == depthLess2 ) ? {p3cntr_width{1'b0}} : incr_head ; 
   assign    next_tail = (tail == depthLess2 ) ? {p3cntr_width{1'b0}} : incr_tail ; 
   assign    EMPTY_N = hasodata; 
   assign    FULL_N  = not_ring_full; 